# -*- coding: utf-8 -*-
"""Data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c94CTuPw6SjFdbmyhpZZW0hShdAlvglD
"""

import pandas as pd
import matplotlib.pylab as plt
import numpy as np

filename="https://raw.githubusercontent.com/klamsal/Fall2024Exam/refs/heads/main/auto.csv"

headers = ["symboling","normalized-losses","make","fuel-type","aspiration", "num-of-doors","body-style",
         "drive-wheels","engine-location","wheel-base", "length","width","height","curb-weight","engine-type",
         "num-of-cylinders", "engine-size","fuel-system","bore","stroke","compression-ratio","horsepower",
         "peak-rpm","city-mpg","highway-mpg","price"]

df = pd.read_csv(filename, names = headers)

df

# exam1prathyusha.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Exam 1 - Prathyusha", layout="wide")

st.title("üöó Exam 1 - Prathyusha's Data App")

# Load CSV
@st.cache_data
def load_data():
    return pd.read_csv("final_data.csv")

df = load_data()

# Dataset Preview
st.subheader("üîç Dataset Preview")
st.dataframe(df.head())

# Summary Statistics
st.subheader("üìä Summary Statistics")
st.write(df.describe())

# Column selection for plotting
numeric_cols = df.select_dtypes(include='number').columns.tolist()
if numeric_cols:
    selected_col = st.selectbox("Select a numeric column for visualization", numeric_cols)

    # Histogram
    st.subheader(f"üìà Histogram of {selected_col}")
    fig1, ax1 = plt.subplots()
    sns.histplot(df[selected_col], kde=True, ax=ax1)
    ax1.set_xlabel(selected_col)
    ax1.set_ylabel("Frequency")
    st.pyplot(fig1)

    # Boxplot
    st.subheader(f"üì¶ Boxplot of {selected_col}")
    fig2, ax2 = plt.subplots()
    sns.boxplot(x=df[selected_col], ax=ax2)
    st.pyplot(fig2)

    # Scatter with another variable
    st.subheader("üìå Scatter Plot")
    other_numeric = st.selectbox("Compare with another column", [col for col in numeric_cols if col != selected_col])
    fig3, ax3 = plt.subplots()
    sns.scatterplot(data=df, x=selected_col, y=other_numeric, ax=ax3)
    st.pyplot(fig3)
else:
    st.warning("No numeric columns available for visualization.")

# Optional filtering if 'price' column exists
if 'price' in df.columns:
    st.subheader("üí∞ Filter by Price")
    max_price = st.slider("Select Maximum Price", float(df['price'].min()), float(df['price'].max()), float(df['price'].max()))
    filtered_df = df[df['price'] <= max_price]
    st.write(filtered_df)
